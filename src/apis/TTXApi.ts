/* tslint:disable */
/* eslint-disable */
/**
 * TTX.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTransactionDto,
  CreatorDto,
  CreatorOrderBy,
  CreatorPartialDtoPaginationDto,
  CreatorTransactionDto,
  DiscordTokenDto,
  LinkDiscordTwitchDto,
  LootBoxResultDto,
  OrderDirection,
  PlayerDto,
  PlayerDtoPaginationDto,
  PlayerOrderBy,
  PlayerTransactionDto,
  TimeStep,
  TokenDto,
} from '../models/index';
import {
    CreateTransactionDtoFromJSON,
    CreateTransactionDtoToJSON,
    CreatorDtoFromJSON,
    CreatorDtoToJSON,
    CreatorOrderByFromJSON,
    CreatorOrderByToJSON,
    CreatorPartialDtoPaginationDtoFromJSON,
    CreatorPartialDtoPaginationDtoToJSON,
    CreatorTransactionDtoFromJSON,
    CreatorTransactionDtoToJSON,
    DiscordTokenDtoFromJSON,
    DiscordTokenDtoToJSON,
    LinkDiscordTwitchDtoFromJSON,
    LinkDiscordTwitchDtoToJSON,
    LootBoxResultDtoFromJSON,
    LootBoxResultDtoToJSON,
    OrderDirectionFromJSON,
    OrderDirectionToJSON,
    PlayerDtoFromJSON,
    PlayerDtoToJSON,
    PlayerDtoPaginationDtoFromJSON,
    PlayerDtoPaginationDtoToJSON,
    PlayerOrderByFromJSON,
    PlayerOrderByToJSON,
    PlayerTransactionDtoFromJSON,
    PlayerTransactionDtoToJSON,
    TimeStepFromJSON,
    TimeStepToJSON,
    TokenDtoFromJSON,
    TokenDtoToJSON,
} from '../models/index';
import { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';
import { HubName } from '../models/HubName';

export interface CreateCreatorRequest {
    username?: string;
    ticker?: string;
}

export interface DiscordCallbackRequest {
    code?: string;
}

export interface GambaRequest {
    lootBoxId: number;
}

export interface GetCreatorRequest {
    slug: string;
    step?: TimeStep;
    after?: Date;
}

export interface GetCreatorTransactionsRequest {
    creatorSlug: string;
    slug?: string;
}

export interface GetCreatorsRequest {
    page?: number;
    limit?: number;
    search?: string;
    orderBy?: CreatorOrderBy;
    orderDir?: OrderDirection;
}

export interface GetPlayerRequest {
    username: string;
    step?: TimeStep;
    after?: Date;
}

export interface GetPlayersRequest {
    page?: number;
    limit?: number;
    search?: string;
    orderBy?: PlayerOrderBy;
    orderDir?: OrderDirection;
}

export interface LinkDiscordTwitchRequest {
    linkDiscordTwitchDto?: LinkDiscordTwitchDto;
}

export interface PlaceOrderRequest {
    createTransactionDto?: CreateTransactionDto;
}

export interface TwitchCallbackRequest {
    code?: string;
}

/**
 *
 */
export class TTXApi extends runtime.BaseAPI {

    /**
     */
    async createCreatorRaw(requestParameters: CreateCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatorDto>> {
        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['ticker'] != null) {
            queryParameters['ticker'] = requestParameters['ticker'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/creators`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatorDtoFromJSON(jsonValue));
    }

    /**
     */
    async createCreator(requestParameters: CreateCreatorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatorDto> {
        const response = await this.createCreatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discordCallbackRaw(requestParameters: DiscordCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscordTokenDto>> {
        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/discord/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscordTokenDtoFromJSON(jsonValue));
    }

    /**
     */
    async discordCallback(requestParameters: DiscordCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscordTokenDto> {
        const response = await this.discordCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gambaRaw(requestParameters: GambaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LootBoxResultDto>> {
        if (requestParameters['lootBoxId'] == null) {
            throw new runtime.RequiredError(
                'lootBoxId',
                'Required parameter "lootBoxId" was null or undefined when calling gamba().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/players/me/lootboxes/{lootBoxId}/open`.replace(`{${"lootBoxId"}}`, encodeURIComponent(String(requestParameters['lootBoxId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LootBoxResultDtoFromJSON(jsonValue));
    }

    /**
     */
    async gamba(requestParameters: GambaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LootBoxResultDto> {
        const response = await this.gambaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCreatorRaw(requestParameters: GetCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatorDto>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getCreator().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['step'] != null) {
            queryParameters['step'] = requestParameters['step'];
        }

        if (requestParameters['after'] != null) {
            queryParameters['after'] = (requestParameters['after'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/creators/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatorDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCreator(requestParameters: GetCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatorDto> {
        const response = await this.getCreatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCreatorTransactionsRaw(requestParameters: GetCreatorTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlayerTransactionDto>>> {
        if (requestParameters['creatorSlug'] == null) {
            throw new runtime.RequiredError(
                'creatorSlug',
                'Required parameter "creatorSlug" was null or undefined when calling getCreatorTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/creators/{creatorSlug}/transactions`.replace(`{${"creatorSlug"}}`, encodeURIComponent(String(requestParameters['creatorSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlayerTransactionDtoFromJSON));
    }

    /**
     */
    async getCreatorTransactions(requestParameters: GetCreatorTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlayerTransactionDto>> {
        const response = await this.getCreatorTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCreatorsRaw(requestParameters: GetCreatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatorPartialDtoPaginationDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDir'] != null) {
            queryParameters['orderDir'] = requestParameters['orderDir'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/creators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatorPartialDtoPaginationDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCreators(requestParameters: GetCreatorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatorPartialDtoPaginationDto> {
        const response = await this.getCreatorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPlayerRaw(requestParameters: GetPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerDto>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getPlayer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['step'] != null) {
            queryParameters['step'] = requestParameters['step'];
        }

        if (requestParameters['after'] != null) {
            queryParameters['after'] = (requestParameters['after'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/players/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPlayer(requestParameters: GetPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerDto> {
        const response = await this.getPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPlayersRaw(requestParameters: GetPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerDtoPaginationDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDir'] != null) {
            queryParameters['orderDir'] = requestParameters['orderDir'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/players`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerDtoPaginationDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPlayers(requestParameters: GetPlayersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerDtoPaginationDto> {
        const response = await this.getPlayersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/players/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerDtoFromJSON(jsonValue));
    }

    /**
     */
    async getSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerDto> {
        const response = await this.getSelfRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async linkDiscordTwitchRaw(requestParameters: LinkDiscordTwitchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions/discord/link`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkDiscordTwitchDtoToJSON(requestParameters['linkDiscordTwitchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenDtoFromJSON(jsonValue));
    }

    /**
     */
    async linkDiscordTwitch(requestParameters: LinkDiscordTwitchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenDto> {
        const response = await this.linkDiscordTwitchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async placeOrderRaw(requestParameters: PlaceOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatorTransactionDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTransactionDtoToJSON(requestParameters['createTransactionDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatorTransactionDtoFromJSON(jsonValue));
    }

    /**
     */
    async placeOrder(requestParameters: PlaceOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatorTransactionDto> {
        const response = await this.placeOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async twitchCallbackRaw(requestParameters: TwitchCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenDto>> {
        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/twitch/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenDtoFromJSON(jsonValue));
    }

    /**
     */
    async twitchCallback(requestParameters: TwitchCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenDto> {
        const response = await this.twitchCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    createHub(name: HubName): HubConnection {
      const hub = new HubConnectionBuilder()
        .withUrl(`${this.configuration.basePath}/hubs/${name}`)
        .withAutomaticReconnect()
        .build()

      return hub;
    }
}
